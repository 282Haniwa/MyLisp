# comment

### SUBR ###

### atom ###
# (atom X)
# Xがatomであればt、そうでなければnilを返す

(atom 1)
# -> t
(atom 1.1)
# -> t
(atom (quote a))
# -> t
(atom nil)
# -> t
(atom (quote (1 2)))
# -> nil


### car ###
# (car X)
# cons(X)のcarを返す

(car (quote (1 2 3)))
# -> 1


### cdr ###
# (cdr X)
# cons(X)のcdrを返す

(cdr (quote (1 2 3)))
# -> (2 3)


### cons ###
# (cons X Y)
# XとYをそれぞれconsのcarとcdrにして返す

(cons (quote (1 2 3)) (quote (4 5 6)))
# -> ((1 2 3) 4 5 6)


### eq ###
# (eq X Y)
# XとYが同値であればt、そうでなければnilを返す

(eq 1 1)
# -> t
(eq 1.1 1.1)
# -> t
(eq (quote a) (quote a))
# -> t
(eq (quote (1 2)) (quote (1 2)))
# -> t
(eq 1 2)
# -> nil
(eq (quote (1 2)) (quote (1 3)))
# -> nil


### eval ###
# (eval X)
# MyLispの処理系と同じようにXを評価する

(eval 1)
# -> 1
(eval (quote ((lambda (x y) (+ x y)) 1 2)))
# -> 3


### numberp ###
# (numberp X)
# Xがnumberであればt、そうでなければnilを返す

(numberp 1)
# -> t
(numberp 1.1)
# -> t
(numberp nil)
# -> nil
(numberp (quote a))
# -> nil


### print ###
# (print X)
# Xを標準出力に書き出し、それ自体を返す

(print 1)
# 1
# -> 1
(print (quote a))
# a
# -> a


### FSUBR ###

### + ###
# (+ X1 X2 X3 ... Xn)
# X1, X2, X3, ... Xnを順次足し合わせて返す
# 値はC言語のdoubleの計算精度、範囲である

(+ 1 2 3)
# -> 6


### - ###
# (- X1 X2 X3 ... Xn)
# X1からX2, X3, ... Xnを順次引いて返す
# 値はC言語のdoubleの計算精度、範囲である

(- 1 2 3)
# -> -4


### * ###
# (* X1 X2 X3 ... Xn)
# X1, X2, X3, ... Xnを順次掛けて合わせて返す
# 値はC言語のdoubleの計算精度、範囲である

(* 1 2 3)
# -> 6


### / ###
# (/ X1 X2 X3 ... Xn)
# X1からX2, X3, ... Xnを順次割って返す
# 値はC言語のdoubleの計算精度、範囲である

(/ 1 2 3)
# -> 0.166667 = 1 / 6


### % ###
# 未実装
# モジュロ演算を順次実行する関数になる予定


### cond ###
# (cond (X1 Y11 Y12 ... Y1n) ... (Xn Yn1 Yn2 ... Ynn))
# x1 ... Xnがtと評価されるまで引数を順に確認し、
# tと評価されたリストのYn1, Yn2 ... Ynnを評価し、最終の評価値を返す

(cond ((eq 1 2) (print 1)) ((eq 2 2) (print 2)) (t (print 3)))
# 2
# -> 2
(cond ((eq 1 2) (print 1)) ((eq 2 3) (print 2)) (t (print 3)))
# 3
# -> 3


### define ###
# (define X Y)
# Xで指定されたatomにYをバインドする

(define x 1)
# -> x
# x = 1
(define x (quote (1 2 3)))
# -> x
# x = (1 2 3)


### defun ###
# 未実装
# どのスコープからでもアクセスできる関数を定義できる関数になる予定


### quote ###
# (quote X)
# Xを評価せずにそのまま返す

(quote a)
# -> a
(quote (1 2 3))
# -> (1 2 3)


### lambdaの扱い ###
# lambdaを関数として扱うことができる

((lambda (x y) (+ x y)) 1 2)
# -> 3

# lambdaをatomにバインドして関数として呼び出すこともできる

(define func (quote (lambda (x y) (+ x y))))
# -> func
# func = (lambda (x y) (+ x y))
(func 1 2)
# -> 3
